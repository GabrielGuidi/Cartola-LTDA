@page "/"

@using Cartola.Domain.Enuns

@inject ICartolaService _cartolaService

<style>
    .centralizar{
        text-align: center;
        display: block;
    }

    .tempoRestante{
        font-size: 18px;
    }
</style>


<MatH4 class="centralizar">Dashboard - Rodada @statusMercado.RodadaAtual</MatH4>

<MatH5 class="centralizar">Mercado @situacaoAtual</MatH5>

<MatH6 class="centralizar">
    Data de fechamento: <span style="font-weight: 800" >@statusMercado.DataFechamento.ToLongDateString()</span> às <span style="font-weight: 800" >@statusMercado.DataFechamento.ToLongTimeString()</span>, horário de Brasília
</MatH6>

<div class="tempoRestante">
    <span class="centralizar">
        Tempo restante:
    </span>
    <span class="centralizar">
        @tempoRestante.Days dias
    </span>
    <span class="centralizar">
        @tempoRestante.Hours.ToString().PadLeft(2, '0')h : @tempoRestante.Minutes.ToString().PadLeft(2, '0')m : @tempoRestante.Seconds.ToString().PadLeft(2, '0')s
    </span>
</div>

<p>@displayText </p>

@code {
    StatusMercado statusMercado;
    string situacaoAtual = "Indeterminado";
    TimeSpan tempoRestante = TimeSpan.MaxValue;

    string displayText = "";

    protected override Task OnInitializedAsync()
    {
        statusMercado = _cartolaService.GetStatusMercado();
        situacaoAtual = ((SituacaoMercadoEnum)statusMercado.Status).ToString();

        tempoRestante = statusMercado.DataFechamento - DateTime.Now;



        Timer();
        return base.OnInitializedAsync();
    }

    async Task Timer()
    {
        while (tempoRestante > new TimeSpan())
        {
            await Task.Delay(1000);
            tempoRestante = tempoRestante.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }

        await AfterTime();
        StateHasChanged();
    }

    Task AfterTime()
    {
        displayText = "Acabou";
        return Task.CompletedTask;
    }
}